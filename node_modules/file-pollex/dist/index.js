/* IMPORT */
import { getFileStat, getFileWatcher } from './utils.js';
/* MAIN */
//TODO: check if "pollex" works over an individual file just the same
const filePollex = (filePath, handler, options = {}) => {
    /* STATE */
    const ignoreInitial = options.ignoreInitial ?? false;
    const ignoreReady = options.ignoreReady ?? false;
    const pollingInterval = options.pollingInterval ?? 1000;
    let initial = true;
    let pollingId;
    let statPrev;
    let watcherPrev;
    /* EVENTS */
    const on = (event) => {
        if (initial && ignoreInitial && event !== 'ready')
            return;
        if (ignoreReady && event === 'ready')
            return;
        handler(event);
    };
    /* REFRESH */
    const refreshStat = () => {
        const stat = getFileStat(filePath);
        if (stat === false)
            return;
        if (stat) {
            if (!statPrev) {
                on('add');
                refreshWatch();
            }
            else if (stat.ino !== statPrev.ino || stat.mtimeMs !== statPrev.mtimeMs || stat.size !== statPrev.size) {
                on('change');
                if (stat.ino !== statPrev.ino) {
                    refreshWatch();
                }
            }
        }
        else if (statPrev) {
            on('unlink');
            watcherPrev?.close();
        }
        statPrev = stat;
    };
    const refreshWatch = () => {
        watcherPrev?.close();
        watcherPrev = getFileWatcher(filePath, refreshStat);
    };
    /* LIFECYCLE */
    const loop = () => {
        refreshStat();
        pollingId = setTimeout(loop, pollingInterval);
    };
    const start = () => {
        initial = true;
        loop();
        on('ready');
        initial = false;
    };
    const stop = () => {
        clearTimeout(pollingId);
        watcherPrev?.close();
    };
    /* RETURN */
    start();
    return stop;
};
/* EXPORT */
export default filePollex;
