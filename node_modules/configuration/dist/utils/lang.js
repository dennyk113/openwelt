/* IMPORT */
import cloneDeep from 'plain-object-clone';
import isEqual from 'plain-object-is-equal';
import merge from 'plain-object-merge';
/* MAIN */
const Lang = {
    /* API */
    merge,
    cloneDeep: (value) => {
        return Lang.isObject(value) ? cloneDeep(value) : value;
    },
    identity: (value) => {
        return value;
    },
    isArray: (value) => {
        return Array.isArray(value);
    },
    isEqual(a, b) {
        return Object.is(a, b) || (Lang.isObject(a) && Lang.isObject(b) && isEqual(a, b));
    },
    isNull: (value) => {
        return value === null;
    },
    isNullary: (value) => {
        return typeof value === 'function' && value.length === 0;
    },
    isObject: (value) => {
        return !Lang.isPrimitive(value);
    },
    isPrimitive: (value) => {
        if (value === null)
            return true;
        const type = typeof value;
        return type !== 'object' && type !== 'function';
    },
    isString: (value) => {
        return typeof value === 'string';
    },
    isUndefined: (value) => {
        return value === undefined;
    }
};
/* EXPORT */
export default Lang;
