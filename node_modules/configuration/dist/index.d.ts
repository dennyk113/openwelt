import type { Scope, ScopeAll, Path, Value, Data, DataRaw, Disposer, ChangeHandler, Options, Provider } from './types';
declare class Configuration {
    private providers;
    private scopes;
    private isArray;
    private defaults;
    private data;
    private filter;
    private handlers;
    constructor(options: Options);
    private getDefaultScope;
    private getTargetScopeForPath;
    private init;
    private refresh;
    private trigger;
    dispose(): void;
    get(): Data;
    get(scope: ScopeAll): Record<Scope, Data>;
    get(scope: ScopeAll, path: Path): Record<Scope, Value | undefined>;
    get(scope: Scope, path: Path): Value | undefined;
    get(path: Path): Value | undefined;
    has(scope: ScopeAll): Record<Scope, boolean>;
    has(scope: ScopeAll, path: Path): Record<Scope, boolean>;
    has(scope: Scope, path: Path): boolean;
    has(path: Path): boolean;
    remove(scope: ScopeAll, path: Path): void;
    remove(scope: Scope, path: Path): void;
    remove(path: Path): void;
    reset(): void;
    reset(scope: Scope): void;
    scope(scope: Scope): Provider | undefined;
    set(scope: ScopeAll, path: Path, value: Value): void;
    set(scope: Scope, path: Path, value: Value): void;
    set(path: Path, value: Value): void;
    update(scope: ScopeAll, data: Data | DataRaw): void;
    update(scope: Scope, data: Data | DataRaw): void;
    update(data: Data | DataRaw): void;
    onChange(handler: ChangeHandler): Disposer;
    onChange(scope: ScopeAll, handler: ChangeHandler): Disposer;
    onChange(scope: ScopeAll, path: Path, handler: ChangeHandler): Disposer;
    onChange(scope: Scope, path: Path, handler: ChangeHandler): Disposer;
    onChange(path: Path, handler: ChangeHandler): Disposer;
}
export default Configuration;
