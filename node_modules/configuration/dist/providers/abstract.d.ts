import type { Callback, Disposer, Data, DataRaw, DataUpdate, DataParser, Filter, ProviderAbstractOptions } from '../types';
declare abstract class ProviderAbstract<Options extends ProviderAbstractOptions = ProviderAbstractOptions> {
    scope: string;
    data: Data;
    dataRaw: DataRaw;
    dataFiltered: Data;
    dataParser: DataParser;
    defaults: Data;
    defaultsRaw: DataRaw;
    filter: Filter;
    handlers: Callback[];
    constructor(options: Options);
    protected init(): void;
    protected isEqual(data: Data | DataRaw): boolean;
    protected trigger(): void;
    dispose(): void;
    onChange(handler: Callback): Disposer;
    abstract read(): Promise<DataUpdate>;
    abstract readSync(): DataUpdate;
    abstract write(data: Data | DataRaw, force?: boolean): Promise<void>;
    abstract writeSync(data: Data | DataRaw, force?: boolean): void;
}
export default ProviderAbstract;
