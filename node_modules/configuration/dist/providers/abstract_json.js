/* IMPORT */
import Lang from '../utils/lang.js';
import PathProp from '../utils/pp.js';
import ProviderAbstractFile from './abstract_file.js';
/* MAIN */
//TODO: Preserve the existing path keys instead of modifying them
class ProviderAbstractJSON extends ProviderAbstractFile {
    /* PUBLIC API */
    async read() {
        if (!this.path)
            return super.read();
        try {
            const dataRaw = await this.fileRead(this.path, 'utf8') ?? this.defaultsRaw;
            const data = PathProp.unflat(this.dataParser.parse(dataRaw) ?? this.defaults);
            return { data, dataRaw };
        }
        catch {
            return {
                data: Lang.cloneDeep(this.defaults),
                dataRaw: this.defaultsRaw
            };
        }
    }
    readSync() {
        if (!this.path)
            return super.readSync();
        try {
            const dataRaw = this.fileReadSync(this.path, 'utf8') ?? this.defaultsRaw;
            const data = PathProp.unflat(this.dataParser.parse(dataRaw) ?? this.defaults);
            return { data, dataRaw };
        }
        catch {
            return {
                data: Lang.cloneDeep(this.defaults),
                dataRaw: this.defaultsRaw
            };
        }
    }
    async write(data, force = false) {
        if (!this.path)
            return super.writeSync(data, force);
        if (!force && this.isEqual(data))
            return;
        super.writeSync(data, true);
        this.fileWrite(this.path, this.dataRaw, this.writeOptions);
    }
    writeSync(data, force = false) {
        if (!this.path)
            return super.writeSync(data, force);
        if (!force && this.isEqual(data))
            return;
        super.writeSync(data, true);
        this.fileWriteSync(this.path, this.dataRaw, this.writeSyncOptions);
    }
}
/* EXPORT */
export default ProviderAbstractJSON;
